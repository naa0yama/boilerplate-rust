# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Rust CI
on:
  push:
    branches:
      - main
    paths: &on_paths
      - "**/*.rs"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - ".github/actions/act-setup-rust/action.yaml"
      - ".github/workflows/ci.yaml"
      - "ast-rules/**.yml"
      - "rust-toolchain.toml"
  pull_request:
    paths: *on_paths
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fmt:
    name: fmt
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      binary_name: ${{ steps.versions.outputs.binary_name }}
      dprint: ${{ steps.versions.outputs.dprint }}
      just: ${{ steps.versions.outputs.just }}
      package_name: ${{ steps.versions.outputs.package_name }}
      sccache: ${{ steps.versions.outputs.sccache }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Check Rust version consistency
        run: |
          rust_version=$(grep -E '^FROM rust:[0-9]+\.[0-9]+\.[0-9]+' Dockerfile | sed -E 's/FROM rust:([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          tool_version=$(grep -E '^channel = "[0-9]+\.[0-9]+\.[0-9]+"' rust-toolchain.toml | sed -E 's/channel = "([0-9]+\.[0-9]+\.[0-9]+)"/\1/')
          if [ "$rust_version" != "$tool_version" ]; then
            echo "ERROR: Rust version mismatch! Dockerfile: $rust_version, rust-toolchain.toml: $tool_version"
            exit 1
          fi

      - name: Extract tool versions
        id: versions
        run: |
          sccache_version=$(grep -E '^ARG SCCACHE_VERSION=v?[0-9]+\.[0-9]+\.[0-9]+' Dockerfile | sed -E 's/ARG SCCACHE_VERSION=(v?[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          dprint_version=$(grep -E '^ARG DPRINT_VERSION=v?[0-9]+\.[0-9]+\.[0-9]+' Dockerfile | sed -E 's/ARG DPRINT_VERSION=(v?[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          just_version=$(grep -E '^ARG JUST_VERSION=v?[0-9]+\.[0-9]+\.[0-9]+' Dockerfile | sed -E 's/ARG JUST_VERSION=(v?[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          package_name=$(grep -E '^\[package\]' -A 10 Cargo.toml | grep -E '^name = "' | sed -E 's/name = "(.*)"/\1/')

          if grep -q '^\[\[bin\]\]' Cargo.toml; then
            main_bin=$(grep -E '^\[\[bin\]\]' -A 10 Cargo.toml | grep -E '^name = "'"$package_name"'"' | sed -E 's/name = "(.*)"/\1/')
            binary_name=${main_bin:-$(grep -E '^\[\[bin\]\]' -A 10 Cargo.toml | grep -E '^name = "' | head -n 1 | sed -E 's/name = "(.*)"/\1/')}
          else
            binary_name="$package_name"
          fi

          echo "sccache=${sccache_version}" >> "$GITHUB_OUTPUT"
          echo "dprint=${dprint_version}" >> "$GITHUB_OUTPUT"
          echo "just=${just_version}" >> "$GITHUB_OUTPUT"
          echo "package_name=${package_name}" >> "$GITHUB_OUTPUT"
          echo "binary_name=${binary_name}" >> "$GITHUB_OUTPUT"

      - name: Rust setup
        uses: ./.github/actions/act-setup-rust
        with:
          just: ${{ steps.versions.outputs.just }}
          sccache: ${{ steps.versions.outputs.sccache }}
          sccache_disable_annotations: true

      - name: Install dprint
        uses: taiki-e/install-action@efd8b64311f7a0a9b888ed13d0df78ec9184c163 # v2
        with:
          tool: dprint@${{ steps.versions.outputs.dprint }}

      - name: Check dprint formatting
        run: |
          set -euxo pipefail
          just dprint "check"

      - name: Check cargo formatting
        run: |
          set -euxo pipefail
          just cargo-fmt

      - name: Run clippy
        run: |
          set -euxo pipefail
          just cargo-clippy

  check:
    name: check
    runs-on: ubuntu-latest
    needs: fmt
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Rust setup
        uses: ./.github/actions/act-setup-rust
        with:
          just: ${{ needs.fmt.outputs.just }}
          sccache: ${{ needs.fmt.outputs.sccache }}
          sccache_disable_annotations: true

      - name: Check compilation
        run: |
          set -euxo pipefail
          just cargo-check

  test:
    name: test
    runs-on: ubuntu-latest
    needs: [fmt, check]
    timeout-minutes: 15
    permissions:
      actions: read #         For octocov to retrieve previous reports from artifacts
      contents: write #       For octocov to push badges to repository
      pull-requests: write #  For octocov to comment on pull requests

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Rust setup
        uses: ./.github/actions/act-setup-rust
        with:
          just: ${{ needs.fmt.outputs.just }}
          sccache: ${{ needs.fmt.outputs.sccache }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@efd8b64311f7a0a9b888ed13d0df78ec9184c163 # v2
        with:
          tool: cargo-llvm-cov

      - name: Generate coverage report
        run: |
          set -euxo pipefail
          just cargo-llvm-cov

      - name: Upload coverage
        uses: k1LoW/octocov-action@73d561f65d59e66899ed5c87e4621a913b5d5c20 # v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: build
    runs-on: ubuntu-latest
    needs: [fmt, check, test]
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Rust setup
        uses: ./.github/actions/act-setup-rust
        with:
          just: ${{ needs.fmt.outputs.just }}
          sccache: ${{ needs.fmt.outputs.sccache }}

      - name: Build release binary
        run: |
          set -euxo pipefail
          just cargo-build release

      - name: Upload binary artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: binary-${{ needs.fmt.outputs.binary_name }}
          path: target/release/${{ needs.fmt.outputs.binary_name }}
