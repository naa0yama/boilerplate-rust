name: Rust CI

on:
  push:
    branches: [main]
    paths: &on_paths
      - "**/*.rs"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - ".github/workflows/ci.yaml"
      - "rust-toolchain.toml"

  pull_request:
    paths: *on_paths
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fmt:
    name: fmt
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5

      - name: Check version consistency
        id: versions
        run: |
          set -euxo pipefail
          echo "Checking Rust version consistency between Dockerfile and CI..."
          rust_version=$(grep -E '^FROM rust:[0-9]+\.[0-9]+' Dockerfile | sed -E 's/FROM rust:([0-9]+\.[0-9]+).*/\1/')
          tool_version=$(grep -E '^channel = "[0-9]+\.[0-9]+"' rust-toolchain.toml | sed -E 's/channel = "([0-9]+\.[0-9]+)"/\1/')
          if [ "$rust_version" != "$tool_version" ]; then
            echo "ERROR: Rust version mismatch!"
            echo "Dockerfile         : $rust_version"
            echo "rust-toolchain.toml: $tool_version"
            echo "Please update rust-toolchain.toml in ci.yaml or Dockerfile to match."
            exit 1
          fi
          echo "✅ Rust versions are consistent!"

          echo "Checking sccache version consistency between Dockerfile and CI..."
          sccache_version=$(grep -E '^ARG SCCACHE_VERSION=v[0-9]+\.[0-9]+\.[0-9]+' Dockerfile | sed -E 's/ARG SCCACHE_VERSION=(v[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "Dockerfile sccache version: $sccache_version"
          echo "sccache=${sccache_version}" >> "$GITHUB_OUTPUT"
          echo "✅ sccache versions are consistent!"

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: ${{ steps.versions.outputs.sccache }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
          cache-shared-key: setup-rust-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dprint
        run: |
          set -euxo pipefail
          curl -fsSL https://dprint.dev/install.sh | sh
          echo "$HOME/.dprint/bin" >> $GITHUB_PATH

      - name: Check dprint formatting
        run: |
          set -euxo pipefail
          dprint check

      - name: Check cargo formatting
        run: |
          set -euxo pipefail
          cargo fmt -- --check

      - name: Run clippy
        run: |
          set -euxo pipefail
          cargo clippy --all-targets --all-features -- -D warnings

  check:
    name: check
    runs-on: ubuntu-latest
    needs: fmt
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: ${{ steps.versions.outputs.sccache }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-shared-key: setup-rust-${{ runner.so }}-${{ runner.arch }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Check compilation
        run: |
          set -euxo pipefail
          cargo check --all-targets --all-features

  test:
    name: test
    runs-on: ubuntu-latest
    needs: [fmt, check]
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: ${{ steps.versions.outputs.sccache }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-shared-key: setup-rust-${{ runner.target }}-${{ runner.arch }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-binstall
        run: |
          set -euxo pipefail
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install cargo-llvm-cov
        run: |
          set -euxo pipefail
          cargo binstall cargo-llvm-cov --no-confirm --force

      - name: Run tests
        run: |
          set -euxo pipefail
          cargo test --release

      - name: Generate coverage report
        run: |
          set -euxo pipefail
          cargo llvm-cov --lcov --output-path target/lcov.info

      - name: Upload coverage
        uses: k1LoW/octocov-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: build
    runs-on: ubuntu-latest
    needs: [fmt, check, test]
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: ${{ steps.versions.outputs.sccache }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-shared-key: setup-rust-${{ runner.target }}-${{ runner.arch }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-binstall
        run: |
          set -euxo pipefail
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install cross
        run: |
          set -euxo pipefail
          cargo binstall cross --no-confirm --force

      - name: Build release binary
        run: |
          set -euxo pipefail
          cross build --release --target ${{ matrix.target }}

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/brust${{ matrix.target == 'x86_64-pc-windows-gnu' && '.exe' || '' }}
