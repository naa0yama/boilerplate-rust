# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Release Build
on:
  workflow_call:
    inputs:
      tag:
        description: "Release tag"
        required: true
        type: string
    outputs:
      artifacts:
        description: "List of built artifacts"
        value: ${{ jobs.build-matrix.outputs.artifacts }}

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: "true"

concurrency:
  group: release-build-${{ inputs.tag }}
  cancel-in-progress: true

jobs:
  build-matrix:
    name: build-${{ matrix.target }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      artifacts: ${{ steps.collect-artifacts.outputs.artifacts }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Extract tool versions
        id: versions
        run: |
          sccache_version=$(grep -E '^ARG SCCACHE_VERSION=v?[0-9]+\.[0-9]+\.[0-9]+' Dockerfile | sed -E 's/ARG SCCACHE_VERSION=(v?[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          just_version=$(grep -E '^ARG JUST_VERSION=v?[0-9]+\.[0-9]+\.[0-9]+' Dockerfile | sed -E 's/ARG JUST_VERSION=(v?[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          zigbuild_version=$(grep -E '^ARG ZIGBUILD_VERSION=v?[0-9]+\.[0-9]+\.[0-9]+' Dockerfile | sed -E 's/ARG ZIGBUILD_VERSION=(v?[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          package_name=$(grep -E '^\[package\]' -A 10 Cargo.toml | grep -E '^name = "' | sed -E 's/name = "(.*)"/\1/')

          if grep -q '^\[\[bin\]\]' Cargo.toml; then
            main_bin=$(grep -E '^\[\[bin\]\]' -A 10 Cargo.toml | grep -E '^name = "'"$package_name"'"' | sed -E 's/name = "(.*)"/\1/')
            binary_name=${main_bin:-$(grep -E '^\[\[bin\]\]' -A 10 Cargo.toml | grep -E '^name = "' | head -n 1 | sed -E 's/name = "(.*)"/\1/')}
          else
            binary_name="$package_name"
          fi

          echo "sccache=${sccache_version}" >> "$GITHUB_OUTPUT"
          echo "just=${just_version}" >> "$GITHUB_OUTPUT"
          echo "zigbuild=${zigbuild_version}" >> "$GITHUB_OUTPUT"
          echo "package_name=${package_name}" >> "$GITHUB_OUTPUT"
          echo "binary_name=${binary_name}" >> "$GITHUB_OUTPUT"

      - name: Rust setup
        uses: ./.github/actions/act-setup-rust
        with:
          just: ${{ steps.versions.outputs.just }}
          sccache: ${{ steps.versions.outputs.sccache }}

      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@6f69ec9970ed0c500b1b76d648e05c4c7e0e5671 # v2
        with:
          tool: cargo-zigbuild@${{ steps.versions.outputs.zigbuild }}

      - name: Build release binary
        run: |
          set -euxo pipefail
          # Disable mold for cross-compilation (zigbuild handles linking)
          unset RUSTFLAGS
          cargo zigbuild --release --target ${{ matrix.target }} --verbose

      - name: Set binary extension
        id: binary-ext
        run: |
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            echo "ext=.exe" >> "$GITHUB_OUTPUT"
          else
            echo "ext=" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload binary artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ steps.versions.outputs.binary_name }}-${{ inputs.tag }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ steps.versions.outputs.binary_name }}${{ steps.binary-ext.outputs.ext }}
          if-no-files-found: error
          retention-days: 7

      - name: Collect artifact info
        id: collect-artifacts
        run: |
          artifact_name="${{ steps.versions.outputs.binary_name }}-${{ inputs.tag }}-${{ matrix.target }}"
          binary_path="target/${{ matrix.target }}/release/${{ steps.versions.outputs.binary_name }}${{ steps.binary-ext.outputs.ext }}"
          echo "artifacts=${artifact_name}:${binary_path}" >> "$GITHUB_OUTPUT"
